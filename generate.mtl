[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard', 'http://www.eclipse.org/papyrus/sysml/1.6/SysML')]


[template public generateClass(aClass : Class)]
[comment @main/]
[file (aClass.FileName(), false, 'UTF-8')]
void [aClass.name.toUpperFirst()/] {
/*
this code was generated by Acceleo, based on a SysML model block diagram 
*/

[aClass.generateIncludes()/]
[aClass.generateVariables()/]
[aClass.generateStructs()/]
[aClass.generateEnums()/]
[aClass.generateDefines()/]
[aClass.generateMethods()/]
[comment]	[aClass.generateBehavior()/][/comment]
}
[/file]
[/template]

[template public generateIncludes (aClass : Class)]
/* INCLUDES ------------------------------------------------------------------*/
[for (i:Property | aClass.attribute)]
[if (i.type.oclIsTypeOf(Class))]
#include "[i.type.name/].h"
[/if]
[/for]
//[protected('includes')]

//[/protected]

[/template]


[template public generateVariables (aClass : Class)]
/* VARIABLES -----------------------------------------------------------------*/
[for (v:Property | aClass.attribute)]
[if (v.type.oclIsTypeOf(Class) <> oclIsTypeOf(Class))]
[else]
[v.type.name/] [v.name/];
[/if]
[comment] [if (v.type.name = 'uint8_t')]
[/if]
[if (v.type.name = 'uint16_t')]
uint16_t [v.name/];
[/if]
[if (v.type.name = 'uint32_t')]
uint32_t [v.name/];
[/if] [/comment]
[/for]
//[protected('variables')]

//[/protected]

[/template]

[template public generateStructs (aClass : Class)]
/* STRUCTS -------------------------------------------------------------------*/
[for (s:Property | aClass.attribute)]
[if (s.type.name.contains('struct'))]
typedef struct [s.name/] {

}[if (s.defaultValue.oclIsUndefined())]
;
[else]
[s.defaultValue.name/];

[/if]
[/if]
[/for]
//[protected('structs')]

//[/protected]

[/template]

[template public generateEnums (aClass : Class)]
/* ENUMS ---------------------------------------------------------------------*/
[for (e:Property | aClass.attribute)]
[if (e.type.name.contains('enum'))]
typedef [e.type.name/] {

}[if (e.defaultValue.oclIsUndefined())]
;
[else]
 [e.defaultValue.name/];

[/if]
[/if]
[/for]
//[protected('enums')]

//[/protected]

[/template]

[template public generateDefines (aClass : Class)]
/* DEFINES -------------------------------------------------------------------*/
[for (d:Property | aClass.attribute)]
[if (d.type.name.contains('#define'))]
[d.type.name/] [d.name/]		[d.defaultValue.name/]

[/if]
[/for]
//[protected('defines')]
//todo
//[/protected]

[/template]

[comment]	Gera as operacoes do bloco	[/comment]
[template public generateMethods (aClass : Class)]
/* PROTOTYPES ----------------------------------------------------------------*/
[for (o:Operation | aClass.ownedOperation)]
[comment]	Gera os metodos contidos nas operacoes do bloco	[/comment]
[comment][for(f:Behavior | aClass.ownedBehavior)][/comment]
[if (o.ownedParameter->isEmpty())]
void [o.name/](void);
[/if]
[if ((o.ownedParameter->at(3))<>oclIsUndefined())]
void [o.name/]([for (t:Parameter | aClass.ownedOperation.ownedParameter->at(1))][t.type.name/] [t.name/], [/for][for (b:Parameter | aClass.ownedOperation.ownedParameter->at(2))][b.type.name/] [b.name/][/for][for (z:Parameter | aClass.ownedOperation.ownedParameter->at(3))], [z.type.name/] [z.name/][/for]);
[elseif ((o.ownedParameter->at(2))<>oclIsUndefined())]
void [o.name/]([for (t:Parameter | aClass.ownedOperation.ownedParameter->at(1))][t.type.name/] [t.name/], [/for][for (b:Parameter | aClass.ownedOperation.ownedParameter->at(2))][b.type.name/] [b.name/][/for]);
[else]
void [o.name/]([o.ownedParameter.type.name/] [o.ownedParameter.name/]);

[/if]
[comment]	[f.name/]() {
	//TODO here
	}[/comment]
[/for]
//[protected('methods')]

//[/protected]
[/template]
[comment][template public generateBehavior (aClass : Class)]
[for (f:Behavior | aClass.ownedBehavior)]
void [f.ownedParameter/]() {
//method declaration
//code should implemented here
}
[/for]
[/template][/comment]

[query public FileName (aClass: Class) : String =
aClass.qualifiedName().replaceAll('\\.','/').concat('.h')
/]

[query public qualifiedName (aClass: Class) : String =
aClass.containingPackages().name->sep('.')->including('.')->including(aClass.name)->toString()
/]

[query public containingPackages (aClass: Class) : Sequence(Package) =
aClass.ancestors(Package)->reject(oclIsKindOf(Model))->reverse()
/]

[query public contains (aValueSpecification : ValueSpecification, aString : String) : String = '' /]

